{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface IconOptions {\n  /**\n   * Name of alternate icon to set\n   */\n  name: string;\n  /**\n   * Name of icons to disable. This is not used for iOS, but required for Android.\n   * @since 3.1.0\n   */\n  disable?: string[];\n  /**\n   * Flag controlling the in app notification which shows after icon is changed. (iOS)\n   */\n  suppressNotification: boolean;\n}\n\nexport interface ResetOptions {\n  /**\n   * Flag controlling the in app notification which shows after icon is changed (iOS).\n   */\n  suppressNotification: boolean;\n\n  /**\n   * Name of icons to disable. This is not used for iOS, but required for Android.\n   * @since 3.1.1\n   */\n  disable?: string[];\n}\n\nexport interface AppIconPlugin {\n  /**\n   * Checks if changing the app icon is supported. (iOS only)\n   * @since 1.0.0\n   */\n  isSupported(): Promise<{ value: boolean }>;\n  /**\n   * Gets the name of currently set alternate icon. If original icon is set, returns null.\n   * @since 1.0.0\n   */\n  getName(): Promise<{ value: string | null }>;\n  /**\n   * Changes app icon to specified alternate.\n   * @since 1.0.0\n   */\n  change(options: IconOptions): Promise<void>;\n  /**\n   * Reverts app icon to original.\n   * @since 1.0.0\n   */\n  reset(options: ResetOptions): Promise<void>;\n\n  // appIconBadgeNumber(): Promise<{value: number}>;\n}\n"]}